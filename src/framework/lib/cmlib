#!/bin/sh

#@==================
#@Funzioni Generiche
#@==================
#@
#@Le funzioni in questa sezioni sono ad utilità generica
#@

#@.. function:: __cm_print_help_header(command)
#@   
#@   Stampa l'help header del comando
#@
#@   ``__cm_print_help_header "system interface ethernet eth0 address4"`` produrrà in stdout ::
#@
#@      -----------------------------------------------
#@      Command Help: system interface ethernet eth0 address4
#@      -----------------------------------------------
#@   
#@   :param command: il comando da documentare
#@   :type command: String
#@
__cm_print_help_header()
{
	echo
	echo "-----------------------------------------------"
	echo "Command Help: $@"
	echo "-----------------------------------------------"
	echo
}

#@.. function:: __cm_print_help_bottom()
#@   
#@   Stampa l'help bottom del comando
#@
#@   ``__cm_print_help_bottom`` produrrà in stdout ::
#@
#@      -----------------------------------------------
#@   
__cm_print_help_bottom()
{
	echo
	echo "-----------------------------------------------"
}

#@.. function:: __cm_debug([text],[...])
#@   
#@   Stampa la stringa passata in stderr solo se è impostata la variabile ``__cm_debug``
#@
#@   ``__cm_debug Hello world`` produrrà in stderr ::
#@
#@       Debug: Hello world 
#@   
#@   :param text: la stringa da stampare
#@   :type text: String
#@
__cm_debug()
{
	[ $__cm_debug ] && echo "Debug: $@" 1>&2
	return 0
}

#@.. function:: __cm_exit_error([text],[...])
#@   
#@   Stampa la stringa passata in stderr ed esce
#@   Se è impostata la varialbel __cm_debug stampa lo stack di chiamata delle funzioni
#@
#@   :param text: la stringa da stampare
#@   :type text: String
#@
__cm_exit_error()

{	
	echo "Error in ${FUNCNAME[1]}:${BASH_LINENO[0]}: $*" 1>&2
	local i=0
	[ $__cm_debug ] && while [ $i -lt ${#FUNCNAME} ]; do
		[ "${FUNCNAME[$i]}" == "main" ] && break
		echo "${BASH_SOURCE[$i]}::${FUNCNAME[$i + 1]}::${BASH_LINENO[$i]}" 1>&2
		i=$(expr $i + 1)
	done
	exit 1
}

#@.. function:: __cm_set_globvars(node)
#@
#@  imposta le variabili `command` `command_path` `param` `command_path_dir` `command_name` `command_node_priority` `command_priority`
#@  in base al command node `node`
#@
#@  * `command`: è il command node senza alcun parametro
#@  * `command_path`: è il path del performer
#@  * `command_path_dir` è la directory contente l'implementazione del comando
#@  * `command_name`: è il nome del comando
#@  * `command_node_priority`: è la priority del nodo contenete il comando
#@  * `command_priority`: è la priorità del comando
#@
#@  :param node: il command node
#@
__cm_set_globvars()
{
	command=$(__cm_command $@)
	command_path=$(__cm_command_path $@)
	param=$(__cm_command_param $@)
	command_path_dir=$(__cm_command_path_dir $@)
	command_name=$(__cm_command_name $@)
	
	command_node_priority=$(__cm_get_command_node_priority $@)
	command_priority=$(__cm_get_command_priority $@)
}

#@=======================
#@Commands Management API
#@=======================
#@
#@Le funzioni in questa sezione servono ad estrapolare le varie parti dei comandi (nome, parametri, script, ecc..)
#@

#@.. function:: __cm_command_param(command)
#@   
#@   Stampa i soli parametri che fanno parte della stringa ``command``
#@
#@   :param command: il comando da cui estrarre i parametri
#@   :type command: String
#@
__cm_command_param()
{
	local full_command="$@"
	local command=$(__cm_command $@)
	local command_length=${#command}
	local params=${full_command:${command_length}}
	echo $params
}

#@.. function:: __cm_command_name(command)
#@   
#@   Stampa il solo nome del comando ``command``
#@
#@   :param command: il comando da cui estrarre il nome
#@   :type command: String
#@
__cm_command_name()
{
	local command_path=$(__cm_command_path $(eval echo $@))
	echo $(basename "$command_path")
}

#@.. function:: __cm_command_name(command)
#@   
#@   Stampa il comando completo esclusi i parametri di ``command``
#@
#@   :param command: il comando da cui togliere gli eventuali parametri
#@   :type command: String
#@
__cm_command()
{
	local OIFS=$IFS
	local IFS=$'\n'
	for line in $(__cm_analyze_command $@); do
		case $line in
			command:*) echo ${line/*:/}
		esac
	done
	IFS=$OIFS
}

#@.. function:: __cm_command_path(command)
#@   
#@   Stampa il path dello script che implementa il comando ``command``
#@
#@   :param command: il comando di cui si vuole conoscere il path del performer. 
#@    Deve essere il coamndo senza parametri
#@   :type command: String
#@
__cm_command_path()
{
	local OIFS=$IFS
	local IFS=$'\n'
	for line in $(__cm_analyze_command $@); do
		case $line in
			path:*) echo ${line/*:/}
		esac
	done
	IFS=$OIFS
}

#@.. function:: __cm_check_nodes_syntax(command)
#@
#@   Naviga il comando `command` e per ogni nodo tag esegue lo script di sintassi
#@
#@   :param command: il comando da verificare
#@   :type command: String
__cm_check_nodes_syntax()
{
	local node command dir all
	all=$@
	command=
	while (($#)); do
		command="$command $1"
		if __cm_is_command_tag $command; then
			dir=$(__cm_command_path $command)
			__cm_debug "Checking syntax for tagged node: $dir"
			$dir/_tag_syntax $all || __cm_exit_error "Invalid syntax for $command"
			command="$command $2"
			shift
		fi
		shift
	done
}

#@.. function:: __cm_exec_tag_nodes(command)
#@
#@   Naviga il comando `command` e per ogni nodo tag esegue lo script di sintassi
#@
#@   :param command: il comando da verificare
#@   :type command: String
__cm_exec_tag_nodes()
{
	local node command dir all
	all=$@
	command=
	while (($#)); do
		command="$command $1"
		if __cm_is_command_tag $command; then
			dir=$(__cm_command_path $command)
			__cm_debug "Executing node: $dir"
			$dir/tag $all || __cm_exit_error "Invalid syntax for $command"
			command="$command $2"
			shift
		fi
		shift
	done
}


#@.. function:: __cm_command_path_dir(command)
#@   
#@   Stampa il nome della directory che contiene lo script che implementa il comando ``command``
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@
__cm_command_path_dir()
{
	local command_path=$(__cm_command_path $@)
	if [ -d "$command_path" ]; then
		echo $command_path
	elif [ -f "$command_path" ]; then
		echo $(dirname "$command_path")
	fi
}

__cm_is_command()
{
	__cm_is_command_leaf $@ && return 0
	__cm_is_command_node $@ && return 0
	__cm_is_command_tag $@ && return 0
	return 1
}

#@.. function:: __cm_is_command_leaf(command)
#@   
#@   ritorna 0 se il comando ``command`` è una foglia, altrimenti 1
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_is_command_leaf()
{
        local OIFS=$IFS
        local IFS=$'\n'
	# use eval for remove quoting
        for line in $(__cm_analyze_command $@ 2>/dev/null); do
                case $line in
                        type:*) if [ "${line/*:/}" == "leaf" ]; then 
					IFS=$OIFS
					return 0
				fi
                esac
        done
        IFS=$OIFS	
	return 1
}

#@.. function:: __cm_is_command_tag(command)
#@   
#@   ritorna 0 se il comando ``command`` è un nodo tag, altrimenti 1
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_is_command_tag()
{
        local OIFS=$IFS
        local IFS=$'\n'
        for line in $(__cm_analyze_command $@ 2>/dev/null); do
                case $line in
                        type:*) if [ "${line/*:/}" == "tag" ]; then 
					IFS=$OIFS
					return 0
				fi
                esac
        done
        IFS=$OIFS	
	return 1
}


#@.. function:: __cm_is_command_node(command)
#@   
#@   ritorna 0 se il comando ``command`` è un ramo, altrimenti 1
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_is_command_node()
{
        local OIFS=$IFS
        local IFS=$'\n'
        for line in $(__cm_analyze_command $@ 2>/dev/null); do
                case $line in
                        type:*) if [ "${line/*:/}" == "node" ]; then 
					IFS=$OIFS
					return 0
				fi
                esac
        done
        IFS=$OIFS	
	return 1
}

#@.. function __cm_analyze_command(command)
#@
#@   stampa `type` e `performer` per il comando passato.
#@   `type` puo' essere **tag**, **node** o **leaf** a seconda del tipo di comando
#@
#@   :param command: il comando da analizzare
#@   :type command: string
#@   :rtype: String
__cm_analyze_command()
{
	local cur path command param i
	path="${__cm_libexec_dir}"
	command=
	node_type=
	performer=
	local OIFS=$IFS
	local IFS=$' '
	param=($(echo $@))
	i=0
	while [ $i -lt ${#param[@]} ]; do
		#cur=${1// //}
		cur=${param[$i]}
		path="$path/${cur}"
		#path=${path/ /}
		command="$command $cur"
		if [ -d "$path/_tag" ]; then
			node_type=tag
			if [ $(expr ${#param[@]} - $i) -ge 2 ]; then
				path="$path/_tag"
			fi
			if [ $(expr ${#param[@]} - $i) -ge 1 ]; then
				command="$command ${param[$i + 1]}"
			fi
			i=$(expr $i + 1)

		elif [ -d "$path" ]; then
			node_type=node
			performer=
			completion_helper=
			syntax_checker=
			help_script=

		elif [ -f "$path" ]; then
			node_type=leaf
			performer="$path"	
			break
		else
			IFS=$OIFS
			__cm_exit_error "Command not found: \"${command/ /}\" $path"
		fi
		i=$(expr $i + 1)
	done
	echo command:${command/ /}
	echo type:$node_type
	echo performer:$performer
	echo path:$path
	IFS=$OIFS
}

__cm_list_node(){
	path=$(__cm_command_path $@)
	#if __cm_is_command_tag ; then
#		return
	#fi

	for node in $path/*; do
		node=$(basename $node)
		[ "${node:0:1}" != "_" ] && echo $node

	done
}

#@.. function:: __cm_get_command_node_priority(command_node)
#@   
#@   stampa la priorità del command node. Se non trova il file di priorità
#@   stampa la priorità definita dalla variabile ``_cm_default_priority``
#@
#@   :param command_node: il comando senza parametri
#@   :type command_node: String
#@   :rtype: Integer
#@
__cm_get_command_node_priority()
{
	local branch=$@
	#local command_dir="$__cm_libexec_dir"/"${@// //}"
	local command_dir="$(__cm_command_path_dir $@)"
	if [ -f "${command_dir}/_priority" ]; then
		cat "$command_dir"/_priority
	else
		echo $__cm_default_priority
		__cm_debug "Priority not found($@). Priority file: $command_dir/_priority"
	fi
}

#@.. function:: __cm_get_command_priority(command)
#@   
#@   stampa la priorità del comado. Se non trova il file di priorità
#@   stampa la priorità definita dalla variabile ``_cm_default_priority``
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_get_command_priority()
{
	local branch=$(eval echo $@)
	local command_dir=$(__cm_command_path_dir $branch)
	local command_name=$(__cm_command_name $branch)
	
	if [ -f "${command_dir}/_${command_name}_priority" ]; then
		cat "${command_dir}/_${command_name}_priority"
	else
		echo $__cm_default_priority
		__cm_debug "Priority not found. Priority file: ${command_dir}/_${command_name}_priority"
	fi

	
}
##### DATABSE LIBRARY #######
#@.. _cmdb_api:
#@
#@=====================================
#@Configuration Management Database API
#@=====================================
#@

#@.. function:: __cm_db_create_node(node)
#@   
#@   Crea un nodo all'interno del CMDB
#@
#@   :param node: il branch da creare
#@   :type node: String
#@
__cm_db_create_node()
{
	branch=$@
	__cm_is_command $branch
	if [ $? == 0 ]; then
		local path_in_db="$(__cm_db_node_to_path $branch)"
		__cm_debug "Creating branch $path_in_db in database"
		mkdir -p $path_in_db
	else
		__cm_exit_error "Create branch in db: Command branch not exist: $@"
	fi
}

#@.. function:: __cm_db_set_leaf(value, leaf_path)
#@   
#@   Crea una foglia con path `leaf_path` all'interno del CMDB impostando il valore a `value`. 
#@   Se la foglia esiste già viene sovrascritta. Es.: ::
#@
#@   __cm_db_set_leaf 192.168.101.11 system name-server
#@
#@   imposterà a `192.168.101.11` la foglia `name-server` sotto il path `system`
#@
#@   :param value: il valore da assegnare alla foglia
#@   :param leaf_path: il path della foglia
#@
__cm_db_set_leaf()
{
	local value=$1
	local branch=${@:2:$((${#@} - 2))}
	local leaf=${@:${#@}}
	local path_in_db="$(__cm_db_node_to_path $branch)"
	__cm_is_command_leaf $branch $leaf
	if [ $? == 0 ]; then
		[ -d "$path_in_db" ] || __cm_db_create_node $branch
		__cm_debug "Setting leaf $path_in_db/$leaf in database"
		echo "$value" > "$path_in_db"/"$leaf"
	else
		__cm_exit_error "Command not exist: $branch $leaf"
	fi
}

#@.. function:: __cm_db_append_leaf(value, leaf_path)
#@   
#@   Aggiunge un valore ad foglia con path `leaf_path` all'interno del CMDB. 
#@   Se la foglia non esiste viene creata. Es.: ::
#@
#@   __cm_db_append_leaf 192.168.101.11/24 interfaces ethernet eth0 address4
#@
#@   imposterà a `192.168.101.11/24` la foglia `address4` sotto il path `interfaces ethernet eth0`
#@
#@   :param value: il valore da aggiungere alla foglia
#@   :param leaf_path: il path della foglia
#@
__cm_db_append_leaf()
{
	local value=$1
	local branch=${@:2:$((${#@} - 2))}
	local leaf=${@:${#@}}
	
	local path_in_db="$(__cm_db_node_to_path $branch)"
	__cm_is_command_leaf $branch $leaf
	if [ $? == 0 ]; then
		[ -d "$path_in_db" ] || __cm_db_create_node $branch
		__cm_debug "Appending to leaf $path_in_db/$leaf in database"
		echo "$value" >> "$path_in_db"/"$leaf"
	else
		__cm_exit_error "Command not exist: $branch $leaf"
	fi

}

#@.. function:: __cm_db_get_leaf(leaf_path)
#@   
#@   Stampa il valore della foglia con path `leaf_path` all'interno del CMDB. 
#@
#@   __cm_db_get_leaf interfaces ethernet eth0 address4
#@
#@   stamperà il contenuto della foglia `address4` sotto il path `interfaces ethernet eth0`
#@
#@   :param leaf_path: il path della foglia
#@
__cm_db_get_leaf()
{	
	local branch="$@"
	#local leaf_path_in_db="$__cm_db_dir"/"${leaf_path// //}"
	local path=$(__cm_db_node_to_path $branch)
	if __cm_db_is_leaf "$branch" ;then 
		cat "$path"
	else
		__cm_exit_error "the configuration leaf \"$branch\" not exist in db"
	fi
}

#@.. function:: __cm_db_list_nodes_sorted_priority(node_path)
#@   
#@   Elenca i nodi figli di `node_path` ordinati per priorità all'interno del CMDB.
#@   Viene stampata anche la priorità
#@
#@   :param node_path: il path del node
#@
__cm_db_list_nodes_sorted_priority()
{
	branch=${@}
	start_path=$(__cm_db_node_to_path $branch)
	if [ -d "$start_path" ];then
		for b in $start_path/*; do
			[ -d "$b" ] || continue
			branch=$(basename $b)
			command=$(eval echo $@ $branch)			
			priority=$(__cm_get_command_node_priority $command)
			ret="$priority:${@} $branch"
			echo ${ret/: /:}
		done | sort -n -k1 -t:
	else
		__cm_exit_error "the configuration path \"$branch\" not exist in db"
	fi
} 

#@.. function:: __cm_db_list_nodes_sorted(node)
#@   
#@   Elenca i nodi figli di `node` ordinati per priorità all'interno del CMDB.
#@
#@   :param node: il path del nodo
#@
__cm_db_list_nodes_sorted()
{ 
	__cm_db_list_nodes_sorted_priority $@ | cut -d: -f2
}

#@.. function:: __cm_db_node_to_path(node)
#@   
#@   Stampa il path del filesystem associato a `node`.
#@
#@   :param node: il path del node
#@
__cm_db_node_to_path()
{
	local branch=$(eval echo $@)
	local start_path="$__cm_db_dir"
	local branch_path=${start_path}/${branch// //}
	echo $branch_path
}

#@.. function:: __cm_db_list_leaf_sorted_priority(node)
#@   
#@   Elenca le foglie figlie di `node` ordinate per priorità all'interno del CMDB.
#@   Viene stampata anche la priorità
#@
#@   :param node: il path del node
#@
__cm_db_list_leaf_sorted_priority()
{
	local branch=$(eval echo $@)
	local path=$(__cm_db_node_to_path $branch)
	for leaf_name in $(ls -1 $path); do
		if __cm_db_is_leaf $branch $leaf_name; then
			local command=$(eval echo $branch $leaf_name)
			local priority=$(__cm_get_command_priority $command)
			echo "${priority}:$command"
			__cm_debug "$command is a leaf, priority is: $priority"
		fi
	done | sort -n -k1 -t:
}

#@.. function:: __cm_db_list_leaf_sorted(node)
#@   
#@   Elenca le foglie figlie di `node_path` ordinate per priorità all'interno del CMDB.
#@
#@   :param node: il path del node
#@
__cm_db_list_leaf_sorted()
{
	__cm_db_list_leaf_sorted_priority $@ | cut -d: -f2-
}


#@.. function:: __cm_db_is_leaf(leaf)
#@   
#@   ritorna 0 se la foglia ``leaf`` è una foglia, altrimenti 1
#@
#@   :param leaf: la voglia da verificare
#@   :type leaf: String
#@   :rtype: Integer
#@
__cm_db_is_leaf()
{
	local branch=$(eval echo $@)
	local path=$(__cm_db_node_to_path $branch)
	local filename=$(basename $path)
	[ "${filename:0:1}" == "_" ] && return 1
	[ -f "$path" ] && return 0 
	return 1 
}

#@.. function:: __cm_db_show_tree([node])
#@   
#@   Stampa un albero del CMDB partendo da `node` ordinato per priorità.
#@   `node` è facoltativo
#@
#@   :param node: il path del branch
#@
__cm_db_show_tree()
{
	tree=$(eval echo $@)
	local OIFS=$IFS
	local IFS=$'\n'
	for leaf in $(__cm_db_list_leaf_sorted $tree); do
		local val=$(__cm_db_get_leaf $leaf)
		for v in $val; do
			echo "$leaf $v"
		done
		[ -z "${val}" ] && echo "$leaf"
	done
	for node in $(__cm_db_list_nodes_sorted $tree); do
		__cm_db_show_tree $node
	done
}
	
# remove leaf from db: the arguments represent the path of leaf
#@.. function:: __cm_db_remove_leaf(leaf_path)
#@   
#@   Rimuove la foglia `leaf_path` dal CMDB.
#@
#@   :param leaf_path: il path della foglia
#@
__cm_db_remove_leaf()
{
	local leaf_path=$(eval echo $@)
	local leaf_path_in_db=$(__cm_db_node_to_path $leaf_path)
	if [ -f "$leaf_path_in_db" ]; then
		rm -f "$leaf_path_in_db"
	else
		__cm_exit_error "the configuration path \"$leaf_path\" not exist in db"
	fi

}

#@.. function:: __cm_db_remove_branch(node)
#@   
#@   Rimuove il node `node` dal CMDB.
#@
#@   :param branch_path: il nodo da rimuovere
#@
__cm_db_remove_node()
{
	local branch_path=$@
	local branch_path_in_db="$__cm_db_dir"/"${branch_path// //}"
	if [ -d "$branch_path_in_db" ]; then
		rm -rf "$branch_path_in_db"
	else
		__cm_exit_error "the configuration path \"$branch_path\" not exist in db"
	fi

}

#@.. function:: __cm_show_conf[node])
#@   
#@   Stampa un albero del CMDB partendo da `node` ordinato per priorità.
#@   A differenza di `__cm_db_show_tree` antepone il nome del comando prendendolo dalla variabile `__cm_bin`
#@
#@   :param branch_path: il nodo do partenza
#@
__cm_show_conf()
{
	local OIFS=$IFS
	local IFS=$'\n'

	for conf in $(__cm_db_show_tree $@); do
        	echo $__cm_bin $conf
	done

	IFS=$IFS
}
