#!/bin/sh

#@==================
#@Funzioni Generiche
#@==================
#@
#@Le funzioni in questa sezioni sono ad utilità generica
#@

#@.. function:: __cm_print_help_header(command)
#@   
#@   Stampa l'help header del comando
#@
#@   ``__cm_print_help_header "system interface ethernet eth0 address4"`` produrrà in stdout ::
#@
#@      -----------------------------------------------
#@      Command Help: system interface ethernet eth0 address4
#@      -----------------------------------------------
#@   
#@   :param command: il comando da documentare
#@   :type command: String
#@
__cm_print_help_header()
{
	echo
	echo "-----------------------------------------------"
	echo "Command Help: $@"
	echo "-----------------------------------------------"
	echo
}

#@.. function:: __cm_print_help_bottom()
#@   
#@   Stampa l'help bottom del comando
#@
#@   ``__cm_print_help_bottom`` produrrà in stdout ::
#@
#@      -----------------------------------------------
#@   
__cm_print_help_bottom()
{
	echo
	echo "-----------------------------------------------"
}

#@.. function:: __cm_debug([text],[...])
#@   
#@   Stampa la stringa passata in stderr solo se è impostata la variabile ``__cm_debug``
#@
#@   ``__cm_debug Hello world`` produrrà in stderr ::
#@
#@       Debug: Hello world 
#@   
#@   :param text: la stringa da stampare
#@   :type text: String
#@
__cm_debug()
{
	[ $__cm_debug ] && echo "Debug: $@" 1>&2
	return 0
}

#@.. function:: __cm_exit_error([text],[...])
#@   
#@   Stampa la stringa passata in stderr ed esce
#@
#@   :param text: la stringa da stampare
#@   :type text: String
#@
__cm_exit_error()
{
	echo "Error: $@"  1>&2 
	exit 1
}

#@=======================
#@Commands Management API
#@=======================
#@
#@Le funzioni in questa sezione servono ad estrapolare le varie parti dei comandi (nome, parametri, script, ecc..)
#@

#@.. function:: __cm_command_param(command)
#@   
#@   Stampa i soli parametri che fanno parte della stringa ``command``
#@
#@   :param command: il comando da cui estrarre i parametri
#@   :type command: String
#@
__cm_command_param()
{
	local full_command="$@"
	local command=$(__cm_command $@)
	local command_length=${#command}
	local params=${full_command:${command_length}}
	echo $params
}

#@.. function:: __cm_command_name(command)
#@   
#@   Stampa il solo nome del comando ``command``
#@
#@   :param command: il comando da cui estrarre il nome
#@   :type command: String
#@
__cm_command_name()
{
	local command_path=$(__cm_command_path $@)
	echo $(basename "$command_path")
}

#@.. function:: __cm_command_name(command)
#@   
#@   Stampa il comando completo esclusi i parametri di ``command``
#@
#@   :param command: il comando da cui togliere gli eventuali parametri
#@   :type command: String
#@
__cm_command()
{
        local cmd="${__cm_libexec_dir}"
	local command=""
	OIFS=$IFS
	IFS=$' '
        for entry in ${@}; do
		cmd_tag="$cmd/_tag"
                cmd="$cmd/${entry}"
		if [ -d "$cmd_tag" ]; then
			if [ -f "$cmd_tag/tag" ]; then
				command="$command"
				break
			fi
		fi
		# $cmd don't exist, exit
		if [ ! -e "$cmd" ]; then 
			__cm_exit_error "Command not found: $@"
			__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
		fi
		# $cmd is a file: command found, break cycle
		if [ -f "$cmd" ]; then 
			command="$command $entry"
			break
		fi
		# $cmd is a direcotry: continue the cycle
		if [ -d "$cmd" ]; then
			command="$command $entry"
		# everything else ??? really necessary ?
		else
			__cm_exit_error "Command not found: $@"
			__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
		fi
        done
	IFS=$IFS
	#if [ ! -f "$cmd" ]; then
	#	__cm_exit_error "Command not found: $@"
	#	__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
	#fi
	# remove first space
	echo "${command/ /}"
}

#@.. function:: __cm_command_path(command)
#@   
#@   Stampa il path dello script che implementa il comando ``command``
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@
__cm_command_path()
{
        local cmd="${__cm_libexec_dir}"
	local command=""
	OIFS=$IFS
	IFS=$' '
        for entry in ${@}; do
		__cm_debug $cmd
		cmd_tag="$cmd/_tag"
                cmd="$cmd/${entry}"
		if [ -d "$cmd_tag" ]; then
			if [ -f "$cmd_tag/tag" ]; then
				command="$command"
				cmd="$cmd_tag/tag"
				break
			fi
		fi
		# $cmd don't exist, exit
		if [ ! -e "$cmd" ]; then
			__cm_exit_error "Command not found: $@"
			__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
		fi
		# $cmd is a file: command found, break cycle
		if [ -f "$cmd" ]; then 
			command="$command $entry"
			break
		fi
		# $cmd is a direcotry: continue the cycle
		if [ -d "$cmd" ]; then
			command="$command $entry"
		if [ -d "$cmd/_tag" ]; then
			command="$command/_tag/tag"
		fi
		# everything else ??? really necessary ?
		else
			__cm_exit_error "Command not found: $@"
			__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
		fi
        done
	IFS=$IFS
	if [ ! -f "$cmd" ]; then
		__cm_exit_error "Command not found: $@"
		__cm_debug "$FUNCNAME: Command not found: $@. libexec path: $cmd"
	fi
	echo "${cmd}"
}

#@.. function:: __cm_command_path_dir(command)
#@   
#@   Stampa il nome della directory che contiene lo script che implementa il comando ``command``
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@
__cm_command_path_dir()
{
	local command_path=$(__cm_command_path $@)
	echo $(dirname "$command_path")
}

#@.. function:: __cm_is_command(command)
#@   
#@   ritorna 0 se il comando ``command`` è un comando, altrimenti 1
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_is_command()
{
	#check path silently
	command_path=$(__cm_command_path $@)
	__cm_debug "checking command \"$@\", path: $command_path"
	[ -e "$command_path" ] && return 0
	return 1
}

#@.. function:: __cm_is_branch(command)
#@   
#@   ritorna 0 se il comando ``command`` è un ramo, altrimenti 1
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_is_command_branch()
{
	#check path silently
	local branch=$@
	local command_path="$__cm_libexec_dir"/"${branch// //}"
	__cm_debug "Checking command branch \"$@\", path: $command_path"
	[ -d "$command_path" ] && return 0
	return 1
}

#@.. function:: __cm_get_command_branch_priority(command_branch)
#@   
#@   stampa la priorità del command branch. Se non trova il file di priorità
#@   stampa la priorità definita dalla variabile ``_cm_default_priority``
#@
#@   :param command_branch: il comando senza parametri
#@   :type command_branch: String
#@   :rtype: Integer
#@
__cm_get_command_branch_priority()
{
	local branch=$@
	local command_dir="$__cm_libexec_dir"/"${@// //}"
	if [ -f "${command_dir}/_priority" ]; then
		cat "$command_dir"/_priority
	else
		echo $__cm_default_priority
		__cm_debug "Priority not found. Priority file: $command_dir/_priority"
	fi
}

#@.. function:: __cm_get_command_branch_priority(command)
#@   
#@   stampa la priorità del comado. Se non trova il file di priorità
#@   stampa la priorità definita dalla variabile ``_cm_default_priority``
#@
#@   :param command: il comando senza parametri
#@   :type command: String
#@   :rtype: Integer
#@
__cm_get_command_priority()
{
	local branch=$@
	command_dir=$(__cm_command_path_dir $@)
	command_name=$(__cm_command_name $@)
	
	if [ -f "${command_dir}/_${command_name}_priority" ]; then
		cat "${command_dir}/_${command_name}_priority"
	else
		echo $__cm_default_priority
		__cm_debug "Priority not found. Priority file: ${command_dir}/_${command_name}_priority"
	fi

	
}
##### DATABSE LIBRARY #######
#@.. _cmdb_api:
#@
#@=====================================
#@Configuration Management Database API
#@=====================================
#@

#@.. function:: __cm_db_create_branch(branch)
#@   
#@   Crea un branch all'interno del CMDB
#@
#@   :param branch: il branch da creare
#@   :type command: String
#@
__cm_db_create_branch()
{
	branch=$@
	__cm_is_command_branch $branch
	if [ $? == 0 ]; then
		local path_in_db="$(__cm_db_branch_to_path $branch)"
		__cm_debug "Creating branch $path_in_db in database"
		mkdir -p $path_in_db
	else
		__cm_exit_error "Creare branch in db: Command branch not exist: $@"
	fi
}

#@.. function:: __cm_db_set_leaf(value, leaf_path)
#@   
#@   Crea una foglia con path `leaf_path` all'interno del CMDB impostando il valore a `value`. 
#@   Se la foglia esiste già viene sovrascritta. Es.: ::
#@
#@   __cm_db_set_leaf 192.168.101.11 system name-server
#@
#@   imposterà a `192.168.101.11` la foglia `name-server` sotto il path `system`
#@
#@   :param value: il valore da assegnare alla foglia
#@   :param leaf_path: il path della foglia
#@
__cm_db_set_leaf()
{
	local value=$1
	local branch=${@:2:$((${#@} - 2))}
	local leaf=${@:${#@}}
	local path_in_db="$(__cm_db_branch_to_path $branch)"
	__cm_is_command $branch $leaf
	if [ $? == 0 ]; then
		[ -d "$path_in_db" ] || __cm_db_create_branch $branch
		__cm_debug "Setting leaf $path_in_db/$leaf in database"
		echo "$value" > "$path_in_db"/"$leaf"
	else
		__cm_exit_error "Command not exist: $branch $leaf"
	fi
}

#@.. function:: __cm_db_append_leaf(value, leaf_path)
#@   
#@   Aggiunge un valore ad foglia con path `leaf_path` all'interno del CMDB. 
#@   Se la foglia non esiste viene creata. Es.: ::
#@
#@   __cm_db_append_leaf 192.168.101.11/24 interfaces ethernet eth0 address4
#@
#@   imposterà a `192.168.101.11/24` la foglia `address4` sotto il path `interfaces ethernet eth0`
#@
#@   :param value: il valore da aggiungere alla foglia
#@   :param leaf_path: il path della foglia
#@
__cm_db_append_leaf()
{
	local value=$1
	local branch=${@:2:$((${#@} - 2))}
	local leaf=${@:${#@}}
	
	local path_in_db="$(__cm_db_branch_to_path $branch)"
	__cm_is_command $branch $leaf
	if [ $? == 0 ]; then
		[ -d "$path_in_db" ] || __cm_db_create_branch $branch
		__cm_debug "Appending to leaf $path_in_db/$leaf in database"
		echo "$value" >> "$path_in_db"/"$leaf"
	else
		__cm_exit_error "Command not exist: $branch $leaf"
	fi

}

#@.. function:: __cm_db_get_leaf(leaf_path)
#@   
#@   Stampa il valore della foglia con path `leaf_path` all'interno del CMDB. 
#@
#@   __cm_db_get_leaf interfaces ethernet eth0 address4
#@
#@   stamperà il contenuto della foglia `address4` sotto il path `interfaces ethernet eth0`
#@
#@   :param leaf_path: il path della foglia
#@
__cm_db_get_leaf()
{	
	local branch="$@"
	#local leaf_path_in_db="$__cm_db_dir"/"${leaf_path// //}"
	local path=$(__cm_db_branch_to_path $branch)
	__cm_db_is_leaf "$branch"
	if [ $? == 0 ];then 
		cat "$path"
	else
		__cm_exit_error "the configuration leaf \"$branch\" not exist in db"
	fi
}

#@.. function:: __cm_db_list_branches_sorted_priority(branch_path)
#@   
#@   Elenca i branch figli di `branch_path` ordinati per priorità all'interno del CMDB.
#@   Viene stampata anche la priorità
#@
#@   :param branch_path: il path del branch
#@
__cm_db_list_branches_sorted_priority()
{
	branch=${@}
	start_path=$(__cm_db_branch_to_path $branch)
	if [ -d "$start_path" ];then
		for b in $start_path/*; do
			[ -d "$b" ] || continue
			branch=$(basename $b)
			priority=$(__cm_get_command_branch_priority "$@ $branch")
			ret="$priority:${@} $branch"
			echo ${ret/: /:}
		done | sort -n -k1 -t:
	else
		__cm_exit_error "the configuration path \"$branch\" not exist in db"
	fi
} 

#@.. function:: __cm_db_list_branches_sorted(branch_path)
#@   
#@   Elenca i branch figli di `branch_path` ordinati per priorità all'interno del CMDB.
#@
#@   :param branch_path: il path del branch
#@
__cm_db_list_branches_sorted()
{ 
	__cm_db_list_branches_sorted_priority $@ | cut -d: -f2
}

# return filesystem path for a branch
#@.. function:: __cm_db_branch_to_path(branch_path)
#@   
#@   Stampa il path del filesystem associato a `branch_path`.
#@
#@   :param branch_path: il path del branch
#@
__cm_db_branch_to_path()
{
	local branch=$@
	local start_path="$__cm_db_dir"
	local branch_path=${start_path}/${branch// //}
	echo $branch_path
}

#@.. function:: __cm_db_list_leaf_sorted(branch_path)
#@   
#@   Elenca le foglie figlie di `branch_path` ordinate per priorità all'interno del CMDB.
#@   Viene stampata anche la priorità
#@
#@   :param branch_path: il path del branch
#@
__cm_db_list_leaf_sorted_priority()
{
	local branch=$@
	local path=$(__cm_db_branch_to_path $branch)
	for leaf_name in $( ls -1 $path); do
		__cm_db_is_leaf "$branch $leaf_name"
		if [ $? == 0 ]; then
			priority=$(__cm_get_command_priority "$branch $leaf_name")
			echo "${priority}:$leaf_name"
			__cm_debug "$leaf_name is a leaf, priority is: $priority"
		fi
	done | sort -n -k1 -t:
}

#@.. function:: __cm_db_list_leaf_sorted(branch_path)
#@   
#@   Elenca le foglie figlie di `branch_path` ordinate per priorità all'interno del CMDB.
#@
#@   :param branch_path: il path del branch
#@
__cm_db_list_leaf_sorted()
{
	__cm_db_list_leaf_sorted_priority $@ | cut -d: -f2-
}

#__cm_db_show_leaf_sorted()
#{
#	local branch=$@
#	for leaf in $(__cm_db_list_leaf_sorted $branch); do
#		__cm_db_get_leaf "$branch $leaf"
#	done
#}

#@.. function:: __cm_db_is_leaf(leaf_path)
#@   
#@   ritorna 0 se la foglia ``leaf_path`` è una foglia, altrimenti 1
#@
#@   :param leaf_path: la voglia da verificare
#@   :type leaf_path: String
#@   :rtype: Integer
#@
__cm_db_is_leaf()
{
	local branch=$@
	local path=$(__cm_db_branch_to_path $branch)
	local filename=$(basename $path)

	[ "${filename:0:1}" == "_" ] && return 1
	[ -f "$path" ] && return 0 	
}

#@.. function:: __cm_db_show_tree([branch_path])
#@   
#@   Stampa un albero del CMDB partendo da `branch_path` ordinato per priorità.
#@
#@   :param branch_path: il path del branch
#@
__cm_db_show_tree()
{
	local tree=
	if [ -n "$@" ]; then
		tree="$@"
	fi
	OIFS=$IFS
	IFS=$'\n'
	for branch in $(__cm_db_list_branches_sorted $tree); do
		for leaf_name in $(__cm_db_list_leaf_sorted $branch); do
			__cm_db_is_leaf "$branch $leaf_name"
			[ $? == 1 ] && continue
			val=$(__cm_db_get_leaf "$branch $leaf_name")
			for v in $val; do
				__cm_debug "Leaf: $branch ${leaf_name}, value: $v"
				echo "$branch $leaf_name $v"
			done
			[ -z "${val}" ] && echo "$branch $leaf_name"
		done
		__cm_db_show_tree $branch
	done
	IFS=$OIFS
}
	
# remove leaf from db: the arguments represent the path of leaf
#@.. function:: __cm_db_remove_leaf(leaf_path)
#@   
#@   Rimuove la foglia `leaf_path` dal CMDB.
#@
#@   :param leaf_path: il path della foglia
#@
__cm_db_remove_leaf()
{
	local leaf_path=$@
	local leaf_path_in_db="$__cm_db_dir"/"${leaf_path// //}"
	if [ -f "$leaf_path_in_db" ]; then
		rm -f "$leaf_path_in_db"
	else
		__cm_exit_error "the configuration path \"$leaf_path\" not exist in db"
	fi

}

# remove branch from db: the arguments represent the path of branch
#@.. function:: __cm_db_remove_branch(branch_path)
#@   
#@   Rimuove il branch `branch_path` dal CMDB.
#@
#@   :param branch_path: il path del branch
#@
__cm_db_remove_branch()
{
	local branch_path=$@
	local branch_path_in_db="$__cm_db_dir"/"${branch_path// //}"
	if [ -d "$branch_path_in_db" ]; then
		rm -rf "$branch_path_in_db"
	else
		__cm_exit_error "the configuration path \"$branch_path\" not exist in db"
	fi

}

#@.. function:: __cm_show_conf[branch_path])
#@   
#@   Stampa un albero del CMDB partendo da `branch_path` ordinato per priorità.
#@   A differenza di `__cm_db_show_tree` antepone il nome del comando prendendolo dalla variabile `__cm_bin`
#@
#@   :param branch_path: il path del branch
#@
__cm_show_conf()
{
	OIFS=$IFS
	IFS=$'\n'

	for conf in $(__cm_db_show_tree $@); do
        	echo $__cm_bin $conf
	done

	IFS=$IFS
}
